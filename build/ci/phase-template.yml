parameters:
  name: ''
  architecture: x64
  buildScript: ''
  queue: {}
  customMatrixes: ''

phases:
  - phase: ${{ parameters.name }}
    variables:
      _buildScript: ${{ parameters.buildScript }}
      _phaseName: ${{ parameters.name }}
      _arch: ${{ parameters.architecture }}
    queue:
      timeoutInMinutes: 45
      parallel: 99
      matrix:
        ${{ if eq(parameters.customMatrixes, '') }}:
          Build_Debug:
            _configuration: Debug
            _config_short: D
            _includeBenchmarkData: false
          Build_Release:
            _configuration: Release
            _config_short: R
            _includeBenchmarkData: true
        ${{ if ne(parameters.customMatrixes, '') }}:
          ${{ insert }}: ${{ parameters.customMatrixes }}
      ${{ insert }}: ${{ parameters.queue }}
    steps:
    - script: $(_buildScript) -$(_configuration) -buildArch=$(_arch)
      displayName: Build
    - script: $(_buildScript) -- /t:DownloadExternalTestFiles /p:IncludeBenchmarkData=$(_includeBenchmarkData)
      displayName: Download Benchmark Data
    - ${{ if eq(parameters.name, 'MacOS') }}:
      - script: brew update && brew install libomp mono-libgdiplus gettext && brew link gettext --force
        displayName: Install runtime dependencies     
    - script: $(_buildScript) -$(_configuration) -runtests -coverage=true
      displayName: Run Tests with code coverage.
      condition: and(eq(variables._phaseName, 'Windows_x64'), eq(variables._configuration, 'Debug'))
    - script: $(_buildScript) -$(_configuration) -runtests
      displayName: Run Tests without code coverage.     
      condition: not(and(eq(variables._phaseName, 'Windows_x64'), eq(variables._configuration, 'Debug')))
    - script: dotnet msbuild build/Codecov.proj /t:Codecov /p:UseCodecov=true
      env:
        CODECOV_TOKEN: $(CODECOV_TOKEN)
      displayName: Upload coverage to codecov.io    
      condition: and(eq(variables._phaseName, 'Windows_x64'), eq(variables._configuration, 'Debug'))
    - task: PublishTestResults@2
      displayName: Publish Test Results
      condition: succeededOrFailed()
      inputs:
        testRunner: 'vSTest'
        searchFolder: '$(System.DefaultWorkingDirectory)/bin'
        testResultsFiles: '**/*.trx'
        testRunTitle: Machinelearning_Tests_$(_phaseName)_$(_configuration)_$(Build.BuildNumber)
        configuration: $(_configuration)
        mergeTestResults: true
    - task: CopyFiles@2
      displayName: Stage build logs
      condition: not(succeeded())
      inputs:
        sourceFolder: $(Build.SourcesDirectory)
        contents: '?(msbuild.*|binclash.log|init-tools.log)'
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: CopyFiles@2
      displayName: Stage test output
      condition: not(succeeded())
      inputs:
        sourceFolder: $(Build.SourcesDirectory)/bin
        contents: |
          **/TestOutput/**/*
          **/*.trx
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: PublishBuildArtifacts@1
      displayName: Publish build and test logs
      condition: not(succeeded())
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: ${{ parameters.name }} $(_config_short)
        artifactType: container
    - script: $(_buildScript) -buildPackages
      displayName: Build Packages
